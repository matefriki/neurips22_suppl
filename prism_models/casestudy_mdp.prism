mdp
// Markov Decision Process. Used for computing \rho_{\phi/R,min/max}

const int initBob = 0;
const int initSigma = 0;
const int initGuard = 5;
const int initTime = 50;

const int perim = 10; // size of the mansion perimeter
const int elec = 3; // position of the electric panel

global turn : [0..3] init 0;

formula d_Alice = min(g, perim-g); // distance of the Guard to Alice
formula d_Bob = min(max(g-elec,elec-g), perim - g +elec); // distance of the Guard to Bob
formula guard_closer_to_Alice = d_Alice < d_Bob;
formula wait = (CS=0)&(GD=0)&(AA=0)&(BA=0); // door has not been open
formula pA = 0.5/(1+d_Alice); // probability to see Alice if guard looks
formula pB = (sigma/100)/(1+d_Bob); // probability to see Bob if guard looks



module Acts
	CS : [0..1] init 0;
	GD : [0..1] init 0;
	AA : [0..1] init 0;
	BA : [0..1] init 0;
	finished : [0..1] init 0;

	[] (turn=0)&wait&(finished=0) -> (turn'=1);
	[] (turn=0)&wait&(finished=0)&(b>0)&guard_closer_to_Alice-> 0.5*pA : (AA'=1) + 0.5*pA : (CS'=1)&(GD'=1) + 0.5*(1-pA)*pB : (CS'=1)&(BA'=1) + 0.5*(1-pA)*pB : (CS'=1)&(GD'=1) + (1-pA - pB + pA*pB) : (CS'=1);
	[] (turn=0)&wait&(finished=0)&(b>0)&!guard_closer_to_Alice -> 0.5*pB : (BA'=1)&(CS'=1) + 0.5*pB : (CS'=1)&(GD'=1) + 0.5*(1-pB)*pA : (AA'=1) + 0.5*(1-pB)*pA : (CS'=1)&(GD'=1) + (1-pA - pB + pA*pB) : (CS'=1);
	[] (turn=0)&(!wait)&(finished=0) -> (finished'=1);
	[] (turn=0)&(finished=1) -> true;
endmodule

module Time
	t : [0..100] init initTime;

	[] (turn=1)&(t > 0) -> (t'=t-1)&(turn'=2);
	[] (turn=1)&(t = 0) -> true;
endmodule

module Bob
	b : [0..3] init initBob;
	sigma : [0..100] init initSigma;

	[] (turn=2)&(b=0) -> 0.9 : (b'=0)&(sigma'=0)&(turn'=3) + 0.1 : (b'= 1)&(sigma'=90)&(turn'=3);
	[] (turn=2)&(b=1) -> 0.9 : (b'=2)&(sigma'=30)&(turn'=3) + 0.1 : (b'= 1)&(sigma'=90)&(turn'=3);
	[] (turn=2)&(b=2) -> 0.9 : (b'=3)&(sigma'=5)&(turn'=3) + 0.1 : (b'= 2)&(sigma'=30)&(turn'=3);
	[] (turn=2)&(b=3) -> 0.9 : (b'=3)&(turn'=3)&(sigma'=5) + 0.1 : (b'= 0)&(sigma'=0)&(turn'=3);
endmodule

// Since the prism language doesn't have modulo operators, we have to make the special cases of the guard
// crossing from 0 to 9 or from 9 to 0 as special cases.
module Guard
	g : [0..9] init initGuard;

	[] (turn=3)&(g = 0) -> (1/3):(g'=0)&(turn'=0) + (1/3):(g'=1)&(turn'=0) + (1/3):(g'=9)&(turn'=0);
	[] (turn=3)&(g = 9) -> (1/3):(g'=0)&(turn'=0) + (1/3):(g'=9)&(turn'=0) + (1/3):(g'=8)&(turn'=0);
	[] (turn=3)&(g != 0) & (g != 9) -> (1/3):(g'=g)&(turn'=0) + (1/3):(g'=g+1)&(turn'=0) + (1/3):(g'=g-1)&(turn'=0);

endmodule

// Alice obtains reward =1 when the car is stolen
rewards
	(CS=1) & (finished = 0) : 1;
endrewards
